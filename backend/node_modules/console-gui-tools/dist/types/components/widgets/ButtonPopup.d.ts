/// <reference types="node" />
import { EventEmitter } from "events";
import { ConsoleManager, KeyListenerArgs } from "../../ConsoleGui.js";
import { PhisicalValues } from "../Utils.js";
/**
 * @description The configuration for the ButtonPopup class.
 * @typedef {Object} ButtonPopupConfig
 *
 * @prop {string} id - The id of the popup.
 * @prop {string} title - The title of the popup.
 * @prop {string} message - The message of the popup.
 * @prop {Array<string>} [buttons] - The buttons of the popup (default is ["Ok", "Cancel", "?"]).
 * @prop {boolean} [visible] - If the popup is visible. Default is false (make it appears using show()).
 *
 * @export
 * @interface ButtonPopupConfig
 */
export interface ButtonPopupConfig {
    id: string;
    title: string;
    message?: string;
    buttons?: Array<string>;
    visible?: boolean;
}
/**
 * @class ButtonPopup
 * @extends EventEmitter
 * @description This class is used to create a popup with That asks for a confirm.
 *
 * ![ButtonPopup](https://user-images.githubusercontent.com/14907987/165752116-b796f41a-e4fe-45db-8c90-5d97318bd17a.gif)
 *
 * Emits the following events:
 * - "confirm" when the user confirm
 * - "cancel" when the user cancel
 * - "exit" when the user exit
 * @param {ButtonPopupConfig} config - The configuration of the popup.
 *
 * @example ```ts
 * const popup = new ButtonPopup({
 *  id: "popup1",
 *  title: "Choose the option",
 *  buttons: ["YES", "NO", "?"],
 * })
 * popup.show() // show the popup
 * popup.on("confirm", () => {
 *  console.log("User confirmed")
 * })
 * popup.on("cancel", () => {
 *  console.log("User canceled")
 * })
 * ```
 */
export declare class ButtonPopup extends EventEmitter {
    readonly CM: ConsoleManager;
    readonly id: string;
    title: string;
    message: string;
    readonly buttons: string[];
    selected: number;
    private hovered;
    private visible;
    private marginTop;
    parsingMouseFrame: boolean;
    /** @var {number} x - The x offset of the popup to be drown. If 0 it will be placed on the center */
    private offsetX;
    /** @var {number} y - The y offset of the popup to be drown. If 0 it will be placed on the center */
    private offsetY;
    private absoluteValues;
    private buttonsAbsoluteValues;
    private dragging;
    private dragStart;
    private focused;
    constructor(config: ButtonPopupConfig);
    /**
     * @description This function is used to make the ConsoleManager handle the key events when the popup is showed.
     * Inside this function are defined all the keys that can be pressed and the actions to do when they are pressed.
     * @param {string} _str - The string of the input.
     * @param {any} key - The key object.
     * @memberof ButtonPopup
     */
    keyListener(_str: string, key: KeyListenerArgs): void;
    /**
     * @description This function is used to show the popup. It also register the key events and refresh the ConsoleManager.
     * @returns {ButtonPopup} The instance of the ButtonPopup.
     * @memberof ButtonPopup
     */
    show(): ButtonPopup;
    /**
     * @description This function is used to hide the popup. It also unregister the key events and refresh the ConsoleManager.
     * @returns {ButtonPopup} The instance of the ButtonPopup.
     * @memberof ButtonPopup
     */
    hide(): ButtonPopup;
    /**
     * @description This function is used to get the visibility of the popup.
     * @returns {boolean} The visibility of the popup.
     * @memberof ButtonPopup
     */
    isVisible(): boolean;
    /**
     * @description This function is used to return the PhisicalValues of the popup (x, y, width, height).
     * @memberof ButtonPopup
     * @private
     * @returns {ButtonPopup} The instance of the ButtonPopup.
     * @memberof ButtonPopup
     */
    getPosition(): PhisicalValues;
    /**
     * @description This function is used to add the ButtonPopup key listener callback to te ConsoleManager.
     * @returns {ButtonPopup} The instance of the ButtonPopup.
     * @memberof ButtonPopup
     */
    private manageInput;
    /**
     * @description This function is used to remove the ButtonPopup key listener callback to te ConsoleManager.
     * @returns {ButtonPopup} The instance of the ButtonPopup.
     * @memberof ButtonPopup
     */
    private unManageInput;
    /**
     * @description This function is used to manage the mouse events on the OptionPopup.
     * @param {MouseEvent} event - The string of the input.
     * @memberof OptionPopup
     */
    private mouseListener;
    /**
     * @description This function is used to draw the ButtonPopup to the screen in the middle.
     * @returns {ButtonPopup} The instance of the ButtonPopup.
     * @memberof ButtonPopup
     */
    draw(): ButtonPopup;
}
export default ButtonPopup;
//# sourceMappingURL=ButtonPopup.d.ts.map